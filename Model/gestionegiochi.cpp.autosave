#include "gestionegiochi.h"

#include <QSaveFile>
#include <QXmlStreamReader>
#include <QFile>
#include <QDebug>
#include"Exceptions/openfileexception.h"

GestioneGiochi::GestioneGiochi()
{

}

GestioneGiochi::~GestioneGiochi()
{
    for (DLinkedList<Gioco*>::list_iterator it = lista_giochi->cbegin(); it != lista_giochi->cend(); it++)
            delete *it;

}

void GestioneGiochi::Salva(Gioco *) const
{
    QSaveFile file(QString::fromStdString(path));
    if(!file.open(QIODevice::WriteOnly)) {
        throw OpenFileException("Errore");
    }

    QXmlStreamWriter writer(&file);

    writer.setAutoFormatting(true); // Per leggibilit√† del file XML
    writer.writeStartDocument();    // Scrive le intestazioni XML
    writer.writeComment("NON MODIFICARE QUESTO FILE!!!!");

    writer.writeStartElement("root");                                // <root>

    auto it=cbegin();
    while(it!=cend()) {
         Gioco* toSave = it->info;
        const QString tipo=QString::fromStdString(toSave->getTipo());
        writer.writeEmptyElement(tipo);


        writer.writeAttribute("nome",QString::fromStdString(toSave->getNome()));
        writer.writeAttribute("anno",QString("%1").arg(toSave->getAnnoRilascio()));
        writer.writeAttribute("sviluppatore",QString::fromStdString(toSave->getSviluppatore()));
        writer.writeAttribute("desc",QString::fromStdString(toSave->getDescrizione()));
        writer.writeAttribute("stagione",QString::fromStdString(toSave->getStagione()));
        writer.writeAttribute("numTessuti",QString("%1").arg(toSave->getNumeroTipoTessuti()));

        if(tipo=="Maglietta"){
            const Maglietta* pM= static_cast<const Maglietta*>(toSave);
            writer.writeAttribute("hasPrinting",pM->getHasPrinting()? "Yes": "No");
            QString s="%1";
            s=s.arg(pM->getLunghezzaManica());
            writer.writeAttribute("lungManica",
                                  QString::fromStdString(pM->convertLunghezzaToString()));

        }else if(tipo=="Felpa"){
            const Felpa* pF= static_cast<const Felpa*>(toSave);
            writer.writeAttribute("hasZip",pF->getHasZip()? "Yes": "No");
            writer.writeAttribute("hasPocket",pF->getHasPocket()? "Yes": "No");

        }else if(tipo=="Gonna"){
            const Gonna* pG= static_cast<const Gonna*>(toSave);
            writer.writeAttribute("tipoGonna",
                                  QString::fromStdString(pG->convertTipoToString()));

        }else if(tipo=="Pantaloni"){
            const Pantaloni* pP= static_cast<const Pantaloni*>(toSave);
            writer.writeAttribute("hasZip",pP->getHasBelt()? "Yes": "No");
        }
        if (writer.hasError()){
            throw std::exception();
        }

        ++it;
    }

    writer.writeEndElement();
    writer.writeEndDocument();
    isDataSaved=true;
    file.commit();
}

void GestioneGiochi::push_end(Gioco * g)
{
    lista_giochi->push_back(g);
    isDataSaved=false;
}

bool GestioneGiochi::getIsDataSaved() const
{
    return isDataSaved;
}

void GestioneGiochi::setDataSaved(bool data)
{
    isDataSaved=data;
}

  DLinkedList<Gioco*>::list_iterator GestioneGiochi::begin()
{
    isDataSaved=false;
    return  lista_giochi->cbegin();
  }

  DLinkedList<Gioco*>::list_iterator GestioneGiochi::end()
  {
      isDataSaved=false;
      return lista_giochi->cend();
  }

DLinkedList<Gioco*>::const_list_iterator GestioneGiochi::cbegin() const
  {
    return lista_giochi->cbegin();
}

DLinkedList<Gioco*>::const_list_iterator GestioneGiochi::cend() const
{
        return lista_giochi->cend();
}
